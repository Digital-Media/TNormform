<?php

namespace Fhooe\NormForm\View;

use Fhooe\NormForm\Parameter\GenericParameter;
use Fhooe\NormForm\Parameter\PostParameter;
use Twig_Environment;
use Twig_Error_Loader;
use Twig_Error_Runtime;
use Twig_Error_Syntax;
use Twig_Loader_Filesystem;

/**
 * A view object that uses the Twig template engine to render its output.
 *
 * This subclass of AbstractView initializes the Twig template engine and passes the stored parameters to it. Twig
 * is then used to render and display the form as specified in the main template. This view also passes on the $_SERVER
 * superglobal to the template (accessible as "_server").
 * Exceptions generated by Twig are shown as errors and logged accoredingly.
 *
 * @package Fhooe\NormForm\View
 * @author Wolfgang Hochleitner <wolfgang.hochleitner@fh-hagenberg.at>
 * @author Martin Harrer <martin.harrer@fh-hagenberg.at>
 * @author Rimbert Rudisch-Sommer <rimbert.rudisch-sommer@fh-hagenberg.at>
 * @version 1.0.0
 */
class TwigView extends AbstractView
{
    /** @var Twig_Loader_Filesystem $loader The Twig loader instance. */
    private $loader;

    /** @var Twig_Environment $twig The main instance of the Twig template engine (environment). */
    private $twig;

    /**
     * Creates a new view object that uses the Twig template engine to render its output.
     * @param string $templateName The name of the main template file (extension is usually .html.twig).
     * @param string $templateDirectory The directory where the template files are located (default is "templates").
     * @param string $templateCacheDirectory The directory where the cached/compiled templates should be stored (default
     * is "templates_c").
     * @param array $params The parameters used to populate the form.
     */
    public function __construct(
        string $templateName,
        string $templateDirectory = "templates",
        string $templateCacheDirectory = "templates_c",
        array $params = []
    ) {
        parent::__construct($templateName, $templateDirectory, $templateCacheDirectory, $params);

        $this->loader = new Twig_Loader_Filesystem($this->templateDirectory);
        $this->twig = new Twig_Environment($this->loader, [
            "cache" => $this->templateCacheDirectory,
            "auto_reload" => true
        ]);
        $this->twig->addGlobal("_server", $_SERVER);
    }

    /**
     * Displays the current view. Iterates over all the parameters and stores them in a temporary, associative array.
     * Twig then displays the main template, using the array with the parameters.
     * Exceptions generated by Twig are shown as errors and logged accordingly.
     */
    public function display()
    {
        $templateParameters = [];
        foreach ($this->params as $param) {
            if ($param instanceof PostParameter) {
                $templateParameters[$param->getName()] = $param;
            } else {
                if ($param instanceof GenericParameter) {
                    $templateParameters[$param->getName()] = $param->getValue();
                }
            }
        }
        try {
            $this->twig->display($this->templateName, $templateParameters);
        } catch (Twig_Error_Loader $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
            error_log($e->getMessage());
        } catch (Twig_Error_Runtime $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
            error_log($e->getMessage());
        } catch (Twig_Error_Syntax $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
            error_log($e->getMessage());
        }
    }
}
